package anbd.he191271.service;

import anbd.he191271.dto.IntentAnalysis;
import anbd.he191271.entity.Product;
import anbd.he191271.entity.Variant;
import anbd.he191271.repository.ProductRepository;
import anbd.he191271.repository.ReviewRepository;
import anbd.he191271.service.AIChatService;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class AIChatServiceImpl implements AIChatService {

    private final ProductRepository productRepository;
    private final ReviewRepository reviewRepository;
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;

    // Gemini API Configuration
    @Value("${gemini.api.key}")
    private String geminiApiKey;

    @Value("${gemini.api.url}")
    private String geminiApiUrl;

    @Value("${gemini.api.model}")
    private String geminiModel;

    @Value("${gemini.generation.temperature}")
    private double temperature;

    @Value("${gemini.generation.max-output-tokens}")
    private int maxOutputTokens;

    @Value("${gemini.api.timeout:30000}")
    private int timeout;

    // Cache
    private final Map<String, List<Product>> productCache = new ConcurrentHashMap<>();
    private long lastCacheUpdate = 0;
    private static final long CACHE_DURATION = 300000;

    // System prompt cho AI
    private static final String SYSTEM_PROMPT = """
        B·∫°n l√† Mia - tr·ª£ l√Ω b√°n h√†ng th√¢n thi·ªán c·ªßa LicenseShop, chuy√™n cung c·∫•p license b·∫£n quy·ªÅn ph·∫ßn m·ªÅm.
        
        VAI TR√í:
        - T∆∞ v·∫•n s·∫£n ph·∫©m license ph√π h·ª£p v·ªõi nhu c·∫ßu kh√°ch h√†ng
        - Cung c·∫•p th√¥ng tin gi√° c·∫£, t√≠nh nƒÉng s·∫£n ph·∫©m
        - H·ªó tr·ª£ th√¥ng tin v·ªÅ c·ª≠a h√†ng, ch√≠nh s√°ch
        - Lu√¥n th√¢n thi·ªán, nhi·ªát t√¨nh, chuy√™n nghi·ªáp
        
        QUY T·∫ÆC:
        - CH·ªà tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn LicenseShop v√† s·∫£n ph·∫©m license
        - KH√îNG tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√¥ng li√™n quan, thay v√†o ƒë√≥ chuy·ªÉn h∆∞·ªõng v·ªÅ s·∫£n ph·∫©m
        - Lu√¥n s·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n, th√¢n thi·ªán
        - Khi c√≥ th√¥ng tin s·∫£n ph·∫©m t·ª´ database, h√£y s·ª≠ d·ª•ng ch√≠nh x√°c th√¥ng tin ƒë√≥
        - Khi kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p, g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±
        
        ƒê·ªäNH D·∫†NG TR·∫¢ L·ªúI:
        - S·ª≠ d·ª•ng emoji ƒë·ªÉ sinh ƒë·ªông
        - C·∫•u tr√∫c r√µ r√†ng, d·ªÖ ƒë·ªçc
        - Lu√¥n c√≥ call-to-action r√µ r√†ng
        """;

    @Override
    public String chat(String message) {
        log.info("Processing chat message: {}", message);

        if (message == null || message.trim().isEmpty()) {
            return generateGreetingResponse();
        }

        try {
            // 1. Ph√¢n t√≠ch intent v√† query database
            IntentAnalysis intent = analyzeIntent(message);
            List<Product> relevantProducts = findRelevantProducts(intent, message);

            // 2. T·∫°o context t·ª´ database results
            String context = buildContext(relevantProducts, intent, message);

            // 3. G·ªçi Gemini v·ªõi context HO·∫∂C fallback th√¥ng minh
            String aiResponse = handleAIResponse(message, context, relevantProducts);

            return aiResponse;

        } catch (Exception e) {
            log.error("Error in AI chat service", e);
            return fallbackResponse(message);
        }
    }

    // ==================== GEMINI CORE ====================

    private String handleAIResponse(String userMessage, String context, List<Product> products) {
        try {
            return callGeminiAI(userMessage, context);
        } catch (Exception e) {
            log.warn("Gemini API failed, using smart fallback response");
            return buildSmartFallbackResponse(userMessage, products);
        }
    }

    private String callGeminiAI(String userMessage, String context) {
        if (geminiApiKey == null || geminiApiKey.isEmpty()) {
            log.warn("Gemini API key not configured, using fallback");
            throw new RuntimeException("Gemini API key not configured");
        }

        log.info("üîë Using API Key: {}... (length: {})",
                geminiApiKey.substring(0, Math.min(10, geminiApiKey.length())),
                geminiApiKey.length());

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        try {
            Map<String, Object> request = buildGeminiRequest(userMessage, context);
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(request, headers);
            String urlWithKey = geminiApiUrl + "?key=" + geminiApiKey;

            log.info("üîß Calling Gemini API: {}", geminiApiUrl);

            ResponseEntity<Map> response = restTemplate.postForEntity(urlWithKey, entity, Map.class);
            log.info("‚úÖ Gemini API call successful");
            return extractGeminiResponse(response.getBody());

        } catch (Exception e) {
            log.error("‚ùå Gemini API call failed: {}", e.getMessage());
            throw new RuntimeException("Gemini API call failed: " + e.getMessage());
        }
    }

    private Map<String, Object> buildGeminiRequest(String userMessage, String context) {
        Map<String, Object> request = new HashMap<>();

        String fullPrompt = SYSTEM_PROMPT + "\n\nCONTEXT FROM DATABASE:\n" + context +
                "\n\nUser: " + userMessage + "\n\nAssistant:";

        Map<String, Object> content = new HashMap<>();
        Map<String, Object> part = new HashMap<>();
        part.put("text", fullPrompt);

        content.put("parts", List.of(part));
        request.put("contents", List.of(content));

        Map<String, Object> generationConfig = new HashMap<>();
        generationConfig.put("temperature", temperature);
        generationConfig.put("maxOutputTokens", maxOutputTokens);
        generationConfig.put("topP", 0.8);
        generationConfig.put("topK", 40);

        request.put("generationConfig", generationConfig);

        Map<String, Object> safetySettings = new HashMap<>();
        safetySettings.put("category", "HARM_CATEGORY_DANGEROUS_CONTENT");
        safetySettings.put("threshold", "BLOCK_MEDIUM_AND_ABOVE");

        request.put("safetySettings", List.of(safetySettings));

        return request;
    }

    private String extractGeminiResponse(Map<String, Object> response) {
        try {
            if (response == null) {
                return "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";
            }

            if (response.containsKey("error")) {
                Map<String, Object> error = (Map<String, Object>) response.get("error");
                String errorMsg = (String) error.get("message");
                log.error("Gemini API error: {}", errorMsg);
                return "Xin l·ªói, h·ªá th·ªëng AI ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.";
            }

            List<Map<String, Object>> candidates = (List<Map<String, Object>>) response.get("candidates");
            if (candidates == null || candidates.isEmpty()) {
                return "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.";
            }

            Map<String, Object> candidate = candidates.get(0);
            Map<String, Object> content = (Map<String, Object>) candidate.get("content");
            List<Map<String, Object>> parts = (List<Map<String, Object>>) content.get("parts");

            if (parts != null && !parts.isEmpty()) {
                String text = (String) parts.get(0).get("text");
                if (text != null && text.startsWith("Assistant:")) {
                    text = text.substring("Assistant:".length()).trim();
                }
                return text;
            }

        } catch (Exception e) {
            log.error("Error extracting Gemini response", e);
        }
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi l√∫c n√†y.";
    }

    // ==================== SMART PRODUCT SEARCH ====================

    private IntentAnalysis analyzeIntent(String message) {
        IntentAnalysis intent = new IntentAnalysis();
        String normalized = normalize(message);

        intent.setProductRelated(true);
        intent.setSearchQueries(extractSearchQueries(normalized));
        intent.setMaxPrice(extractMaxPrice(normalized));
        intent.setCategory(extractCategory(normalized));

        log.info("üéØ Intent Analysis - Queries: {}, MaxPrice: {}, Category: {}",
                intent.getSearchQueries(), intent.getMaxPrice(), intent.getCategory());

        return intent;
    }

    private List<String> extractSearchQueries(String message) {
        String normalized = normalize(message);

        if (!isProductRelated(normalized)) {
            return Collections.emptyList();
        }

        List<String> queries = new ArrayList<>();

        // üö® PATTERN M·ªöI - LINH HO·∫†T H∆†N
        // T√°ch ri√™ng t·ª´ng t·ª´ kh√≥a thay v√¨ pattern ph·ª©c t·∫°p
        String[] productKeywords = {
                "microsoft office", "office 365", "office", "word", "excel", "powerpoint",
                "windows 10", "windows 11", "windows",
                "adobe photoshop", "photoshop", "adobe premiere", "premiere", "adobe illustrator", "illustrator", "adobe",
                "steam wallet", "steam", "game",
                "antivirus", "kaspersky", "norton", "bitdefender",
                "matlab", "autocad", "visual studio",
                "grammarly", "spotify", "netflix", "youtube premium",
                "microsoft", "adobe", "license", "b·∫£n quy·ªÅn", "ph·∫ßn m·ªÅm", "software"
        };

        // üö® KI·ªÇM TRA T·ª™NG T·ª™ KH√ìA
        for (String keyword : productKeywords) {
            if (normalized.contains(keyword)) {
                queries.add(keyword);
                log.info("‚úÖ Found product keyword: '{}' in message: '{}'", keyword, normalized);
            }
        }

        // üö® TH√äM T√åM KI·∫æM THEO T·ª™ ƒê∆†N GI·∫¢N
        if (queries.isEmpty()) {
            String[] simpleKeywords = normalized.split("\\s+");
            for (String word : simpleKeywords) {
                if (word.length() > 2 && isProductWord(word)) {
                    queries.add(word);
                    log.info("‚úÖ Found product word: '{}'", word);
                }
            }
        }

        log.info("üîç Extracted {} product queries: {}", queries.size(), queries);
        return queries;
    }

    // üö® METHOD M·ªöI: Ki·ªÉm tra t·ª´ ƒë∆°n c√≥ ph·∫£i l√† s·∫£n ph·∫©m kh√¥ng
    private boolean isProductWord(String word) {
        if (word.length() < 3) return false;

        String[] productWords = {
                "office", "word", "excel", "windows", "photoshop", "premiere",
                "illustrator", "steam", "game", "adobe", "microsoft", "license",
                "grammarly", "spotify", "netflix", "matlab", "autocad", "visual",
                "studio", "antivirus", "kaspersky", "norton", "bitdefender"
        };

        for (String productWord : productWords) {
            if (productWord.contains(word) || word.contains(productWord)) {
                return true;
            }
        }
        return false;
    }

    private List<Product> findRelevantProducts(IntentAnalysis intent, String originalMessage) {
        List<Product> products = new ArrayList<>();
        Set<String> processedProductNames = new HashSet<>(); // üö® D√πng t√™n thay v√¨ ID

        // T√¨m theo t·∫•t c·∫£ queries
        if (intent.getSearchQueries() != null && !intent.getSearchQueries().isEmpty()) {
            for (String query : intent.getSearchQueries()) {
                log.info("Searching products by keyword: '{}'", query);
                List<Product> keywordResults = productRepository.searchByKeyword(query);
                log.info("Found {} products for query: '{}'", keywordResults.size(), query);

                for (Product product : keywordResults) {
                    // üö® S·ª¨A: D√πng t√™n s·∫£n ph·∫©m ƒë·ªÉ tr√°nh duplicate
                    if (product != null && product.getName() != null) {
                        if (processedProductNames.add(product.getName().toLowerCase())) {
                            products.add(product);
                        }
                    }
                }
            }
        }

        // T√¨m theo category
        if (products.isEmpty() && intent.getCategory() != null) {
            log.info("Searching products by category: '{}'", intent.getCategory());
            List<Product> categoryResults = productRepository.searchByKeyword(intent.getCategory());
            for (Product product : categoryResults) {
                if (product != null && product.getName() != null) {
                    if (processedProductNames.add(product.getName().toLowerCase())) {
                        products.add(product);
                    }
                }
            }
        }

        // Semantic search
        if (products.isEmpty()) {
            log.info("Falling back to semantic search for: '{}'", originalMessage);
            List<Product> semanticResults = findProductsBySemanticSearch(originalMessage);
            for (Product product : semanticResults) {
                if (product != null && product.getName() != null) {
                    if (processedProductNames.add(product.getName().toLowerCase())) {
                        products.add(product);
                    }
                }
            }
        }

        // Popular products fallback
        if (products.isEmpty() && isMeaningfulProductQuery(originalMessage)) {
            log.info("Returning popular products as fallback");
            List<Product> popularResults = getPopularProducts();
            for (Product product : popularResults) {
                if (product != null && product.getName() != null) {
                    if (processedProductNames.add(product.getName().toLowerCase())) {
                        products.add(product);
                    }
                }
            }
        }

        // L·ªçc theo gi√°
        if (intent.getMaxPrice() != null) {
            products = products.stream()
                    .filter(p -> p != null && hasAffordableVariant(p, intent.getMaxPrice()))
                    .collect(Collectors.toList());
        }

        List<Product> finalProducts = products.stream()
                .filter(p -> p != null && "available".equals(p.getStatus()))
                .distinct()
                .limit(10)
                .collect(Collectors.toList());

        log.info("üéØ Final products found: {}", finalProducts.size());
        return finalProducts;
    }

    private boolean isMeaningfulProductQuery(String message) {
        String normalized = normalize(message);

        Pattern meaninglessPattern = Pattern.compile(
                "(?i).*(c√≥ g√¨|g√¨ d∆∞·ªõi|s·∫£n ph·∫©m n√†o|m·∫∑t h√†ng|m√≥n n√†o|ƒë·ªì n√†o|t√¨m g√¨|ki·∫øm g√¨).*"
        );

        Pattern meaningfulPattern = Pattern.compile(
                "(?i).*(office|windows|photoshop|steam|game|microsoft|adobe|ph·∫ßn m·ªÅm|license|b·∫£n quy·ªÅn|word|excel|powerpoint).*"
        );

        return !meaninglessPattern.matcher(normalized).matches() &&
                meaningfulPattern.matcher(normalized).matches();
    }

    private List<Product> findProductsBySemanticSearch(String message) {
        List<Product> allProducts = getCachedProducts();
        List<Product> matches = new ArrayList<>();

        for (Product product : allProducts) {
            if (calculateRelevanceScore(product, message) > 0.1) {
                matches.add(product);
            }
        }

        matches.sort((p1, p2) ->
                Double.compare(calculateRelevanceScore(p2, message),
                        calculateRelevanceScore(p1, message)));

        return matches.stream().limit(10).collect(Collectors.toList());
    }

    private double calculateRelevanceScore(Product product, String query) {
        if (product == null) return 0.0;

        String productText = (product.getName() + " " +
                (product.getDescription() != null ? product.getDescription() : "") +
                (product.getCategory() != null ? " " + product.getCategory().getName() : ""))
                .toLowerCase();

        String queryLower = query.toLowerCase();

        double score = 0.0;
        String[] importantWords = extractImportantWords(queryLower);

        for (String word : importantWords) {
            if (productText.contains(word)) {
                score += 1.0;
            }
        }

        if (productText.contains("office") && queryLower.contains("office")) score += 2.0;
        if (productText.contains("windows") && queryLower.contains("windows")) score += 2.0;
        if (productText.contains("photoshop") && queryLower.contains("photoshop")) score += 2.0;
        if (productText.contains("steam") && queryLower.contains("steam")) score += 2.0;
        if (productText.contains("game") && queryLower.contains("game")) score += 2.0;

        return importantWords.length > 0 ? score / importantWords.length : 0.0;
    }

    private String[] extractImportantWords(String query) {
        String cleaned = query.replaceAll(
                        "(?i)\\b(t√¥i|m√¨nh|mu·ªën|mua|c·∫ßn|gi√°|bao nhi√™u|b·∫°n|c√≥|kh√¥ng|g√¨|n√†o|·∫°|∆°i|√†|ƒë·ªÉ|l√†m|cho)\\b", "")
                .replaceAll("\\s+", " ")
                .trim();

        return cleaned.isEmpty() ? new String[0] : cleaned.split("\\s+");
    }

    private boolean hasAffordableVariant(Product product, BigDecimal maxPrice) {
        if (product == null || product.getVariants() == null || product.getVariants().isEmpty()) {
            return true;
        }

        return product.getVariants().stream()
                .anyMatch(v -> v != null && BigDecimal.valueOf(v.getPrice()).compareTo(maxPrice) <= 0);
    }

    private List<Product> getPopularProducts() {
        return getCachedProducts().stream()
                .filter(p -> "available".equals(p.getStatus()))
                .limit(5)
                .collect(Collectors.toList());
    }

    // ==================== SMART FALLBACK RESPONSES ====================

    private String buildSmartFallbackResponse(String userMessage, List<Product> products) {
        if (products != null && !products.isEmpty()) {
            return buildFallbackProductResponse(products);
        }

        String normalized = normalize(userMessage);

        if (normalized.contains("c√≥ g√¨") || normalized.contains("g√¨ d∆∞·ªõi") || normalized.contains("s·∫£n ph·∫©m n√†o")) {
            return buildNoProductsFoundResponse(userMessage);
        } else if (isProductRelated(normalized)) {
            return buildProductSuggestionResponse(userMessage);
        } else {
            return getDefaultShopResponse();
        }
    }

    private String buildNoProductsFoundResponse(String userMessage) {
        String normalized = normalize(userMessage);

        if (normalized.contains("video") || normalized.contains("l√†m video")) {
            return "üé¨ **Hi·ªán ch∆∞a c√≥ s·∫£n ph·∫©m ph·∫ßn m·ªÅm l√†m video**\n\n" +
                    "Tuy nhi√™n, ch√∫ng t√¥i c√≥ c√°c s·∫£n ph·∫©m Adobe Creative Cloud ph√π h·ª£p:\n\n" +
                    "‚Ä¢ **Adobe Photoshop** - Ch·ªânh s·ª≠a ·∫£nh chuy√™n nghi·ªáp\n" +
                    "‚Ä¢ **Adobe Premiere** - D·ª±ng video chuy√™n nghi·ªáp\n\n" +
                    "üí° **Li√™n h·ªá hotline 1900 636 969 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n th√™m!**";
        }

        if (normalized.contains("di·ªát virus") || normalized.contains("antivirus") || normalized.contains("b·∫£o m·∫≠t")) {
            return "üõ°Ô∏è **Hi·ªán ch∆∞a c√≥ s·∫£n ph·∫©m di·ªát virus**\n\n" +
                    "Tuy nhi√™n, ch√∫ng t√¥i c√≥ c√°c gi·∫£i ph√°p b·∫£o m·∫≠t kh√°c:\n\n" +
                    "‚Ä¢ **VPN services** - B·∫£o v·ªá truy c·∫≠p internet\n" +
                    "‚Ä¢ **Password managers** - Qu·∫£n l√Ω m·∫≠t kh·∫©u an to√†n\n\n" +
                    "üí° **Li√™n h·ªá hotline 1900 636 969 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n gi·∫£i ph√°p b·∫£o m·∫≠t!**";
        }

        if (normalized.contains("d∆∞·ªõi") && (normalized.contains("500") || normalized.contains("500k"))) {
            return "üí∞ **C√°c s·∫£n ph·∫©m d∆∞·ªõi 500k:**\n\n" +
                    "‚Ä¢ **Microsoft Office 365** - 1 th√°ng: 50.000ƒë\n" +
                    "‚Ä¢ **Grammarly Premium** - 1 th√°ng: 50.000ƒë\n" +
                    "‚Ä¢ **Spotify Premium** - 1 th√°ng: 50.000ƒë\n" +
                    "‚Ä¢ **Steam Wallet 100k** - 1 th√°ng: 50.000ƒë\n\n" +
                    "üí° **T·∫•t c·∫£ ƒë·ªÅu c√≥ g√≥i 1 th√°ng v·ªõi gi√° 50.000ƒë!**";
        }

        return "üîç **Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu**\n\n" +
                "Nh∆∞ng ch√∫ng t√¥i c√≥ c√°c s·∫£n ph·∫©m n·ªïi b·∫≠t:\n\n" +
                "‚Ä¢ **Microsoft Office 365** - So·∫°n th·∫£o vƒÉn b·∫£n\n" +
                "‚Ä¢ **Steam Wallet** - N·∫°p game Steam\n" +
                "‚Ä¢ **Spotify Premium** - Nghe nh·∫°c kh√¥ng qu·∫£ng c√°o\n\n" +
                "üí° **G√µ t√™n s·∫£n ph·∫©m c·ª• th·ªÉ ho·∫∑c li√™n h·ªá 1900 636 969**";
    }

    private String buildProductSuggestionResponse(String userMessage) {
        String normalized = normalize(userMessage);

        if (normalized.contains("office") || normalized.contains("word") || normalized.contains("excel")) {
            return "üìä **Microsoft Office 365**\n\n" +
                    "üí∞ **Gi√°:** T·ª´ 50.000ƒë (1 th√°ng) ƒë·∫øn 500.000ƒë (1 nƒÉm)\n\n" +
                    "‚úÖ Bao g·ªìm: Word, Excel, PowerPoint, Outlook\n" +
                    "‚ö° Giao key ngay sau thanh to√°n\n" +
                    "üìû **ƒê·∫∑t mua: 1900 636 969**";
        }

        if (normalized.contains("game") || normalized.contains("steam")) {
            return "üéÆ **Steam Wallet Code**\n\n" +
                    "üí∞ **M·ªánh gi√°:** 50.000ƒë, 100.000ƒë, 200.000ƒë, 500.000ƒë\n\n" +
                    "‚úÖ N·∫°p ti·ªÅn v√†o t√†i kho·∫£n Steam\n" +
                    "‚ö° Giao code ngay t·ª©c th√¨\n" +
                    "üìû **ƒê·∫∑t mua: 1900 636 969**";
        }

        return "üéØ **D·ª±a tr√™n nhu c·∫ßu c·ªßa b·∫°n, t√¥i g·ª£i √Ω:**\n\n" +
                "üìä **Microsoft Office** - So·∫°n th·∫£o vƒÉn b·∫£n, b·∫£ng t√≠nh\n" +
                "üé® **Adobe Creative Cloud** - Thi·∫øt k·∫ø ƒë·ªì h·ªça, ch·ªânh s·ª≠a ·∫£nh\n" +
                "üéÆ **Steam Wallet** - N·∫°p ti·ªÅn ch∆°i game\n" +
                "üéµ **Spotify Premium** - Nghe nh·∫°c tr·ª±c tuy·∫øn\n\n" +
                "üí° **H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn s·∫£n ph·∫©m c·ª• th·ªÉ n√†o!**\n" +
                "üìû **H·ªó tr·ª£ nhanh: 1900 636 969**";
    }

    private String buildFallbackProductResponse(List<Product> products) {
        if (products == null || products.isEmpty()) {
            return getDefaultShopResponse();
        }

        if (products.size() == 1) {
            Product product = products.get(0);
            String productName = product.getName() != null ? product.getName() : "S·∫£n ph·∫©m";
            String description = product.getDescription() != null ? "üìù " + product.getDescription() + "\n\n" : "";

            String priceInfo = "Li√™n h·ªá";
            if (product.getVariants() != null && !product.getVariants().isEmpty()) {
                int minPrice = getMinPrice(product.getVariants());
                priceInfo = "T·ª´ " + formatPrice(minPrice);
            }

            return "üì¶ **" + productName + "**\n\n" +
                    description +
                    "üí∞ **Gi√°:** " + priceInfo + "\n\n" +
                    "‚úÖ Ch√≠nh h√£ng 100% ‚Ä¢ ‚ö° Giao key ngay ‚Ä¢ üìû 1900 636 969";
        } else {
            StringBuilder response = new StringBuilder();
            response.append("üîç **T√¨m th·∫•y ").append(products.size()).append(" s·∫£n ph·∫©m ph√π h·ª£p:**\n\n");

            for (Product p : products) {
                if (p != null) {
                    response.append("‚Ä¢ **").append(p.getName() != null ? p.getName() : "S·∫£n ph·∫©m").append("**");
                    if (p.getVariants() != null && !p.getVariants().isEmpty()) {
                        int minPrice = getMinPrice(p.getVariants());
                        response.append(" ‚Äî T·ª´ ").append(formatPrice(minPrice));
                    }
                    response.append("\n");
                }
            }

            response.append("\nüí° **G√µ t√™n s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt!**");
            response.append("\nüìû **H·ªó tr·ª£ nhanh: 1900 636 969**");
            return response.toString();
        }
    }

    // ==================== CONTEXT BUILDER ====================

    private String buildContext(List<Product> products, IntentAnalysis intent, String originalMessage) {
        StringBuilder context = new StringBuilder();

        if (products != null && !products.isEmpty()) {
            context.append("T·∫§T C·∫¢ S·∫¢N PH·∫®M T√åM TH·∫§Y TRONG DATABASE (").append(products.size()).append(" s·∫£n ph·∫©m):\n\n");
            for (int i = 0; i < products.size(); i++) {
                Product product = products.get(i);
                if (product != null) {
                    context.append("„ÄêS·∫£n ph·∫©m ").append(i + 1).append("„Äë\n");
                    context.append(buildProductContext(product)).append("\n---\n");
                }
            }
        } else {
            context.append("KH√îNG C√ì S·∫¢N PH·∫®M PH√ô H·ª¢P TRONG DATABASE.\n");
        }

        context.append("\nINTENT PH√ÇN T√çCH:\n");
        context.append("- Product Related: ").append(intent.isProductRelated()).append("\n");
        context.append("- Search Queries: ").append(intent.getSearchQueries()).append("\n");
        context.append("- Max Price: ").append(intent.getMaxPrice()).append("\n");
        context.append("- Category: ").append(intent.getCategory()).append("\n");

        log.info("üìã Context built with {} products", products != null ? products.size() : 0);
        return context.toString();
    }

    private String buildProductContext(Product product) {
        if (product == null) {
            return "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i";
        }

        StringBuilder context = new StringBuilder();

        context.append("T√™n: ").append(product.getName() != null ? product.getName() : "N/A").append("\n");

        if (product.getDescription() != null) {
            context.append("M√¥ t·∫£: ").append(product.getDescription()).append("\n");
        }

        if (product.getCategory() != null && product.getCategory().getName() != null) {
            context.append("Danh m·ª•c: ").append(product.getCategory().getName()).append("\n");
        }

        if (product.getVariants() != null && !product.getVariants().isEmpty()) {
            context.append("C√°c phi√™n b·∫£n:\n");
            for (Variant variant : product.getVariants()) {
                if (variant != null) {
                    context.append("  - ").append(buildVariantLabel(variant))
                            .append(": ").append(formatPrice(variant.getPrice())).append("\n");
                }
            }
        }

        context.append("Tr·∫°ng th√°i: ").append(product.getStatus() != null ? product.getStatus() : "N/A");

        return context.toString();
    }

    // ==================== FALLBACK & UTILITIES ====================

    private String fallbackResponse(String originalMessage) {
        IntentAnalysis intent = analyzeIntent(originalMessage);
        List<Product> products = findRelevantProducts(intent, originalMessage);

        if (products != null && !products.isEmpty()) {
            return buildFallbackProductResponse(products);
        }

        return getDefaultShopResponse();
    }

    // ==================== HELPER METHODS ====================

    private boolean isProductRelated(String message) {
        if (message == null || message.trim().isEmpty()) {
            return false;
        }

        String normalized = normalize(message);

        // üö® CH·ªà KI·ªÇM TRA C√ì T·ª™ KH√ìA S·∫¢N PH·∫®M - KH√îNG FILTER NON-PRODUCT
        Pattern productPattern = Pattern.compile(
                "(?i)\\b(office|windows|photoshop|steam|game|microsoft|adobe|" +
                        "license|b·∫£n quy·ªÅn|grammarly|spotify|netflix|matlab|autocad|" +
                        "visual studio|antivirus|ph·∫ßn m·ªÅm|software|mua|gi√°|c·∫ßn|t√¨m|" +
                        "ƒë·ªãnh mua|mu·ªën mua|t∆∞ v·∫•n|h·ªèi v·ªÅ)\\b"
        );

        boolean hasProduct = productPattern.matcher(normalized).find();

        log.info("üéØ Product detection - HasProduct: {}, Message: '{}'", hasProduct, normalized);

        // üö® LU√îN TR·∫¢ V·ªÄ TRUE N·∫æU C√ì T·ª™ KH√ìA S·∫¢N PH·∫®M
        return hasProduct;
    }

    private BigDecimal extractMaxPrice(String message) {
        Pattern pattern = Pattern.compile("(d∆∞·ªõi|d∆∞·ªõi kho·∫£ng|d∆∞·ªõi t·∫ßm|kho·∫£ng|t·∫ßm|gi√°)\\s*(\\d+)(\\s*(tri·ªáu|tr|k|ngh√¨n))?");
        Matcher matcher = pattern.matcher(message);

        if (matcher.find()) {
            try {
                BigDecimal amount = new BigDecimal(matcher.group(2));
                String unit = matcher.group(4);

                if (unit != null && (unit.contains("tri·ªáu") || unit.contains("tr"))) {
                    return amount.multiply(BigDecimal.valueOf(1000000));
                } else if (unit != null && unit.equals("k")) {
                    return amount.multiply(BigDecimal.valueOf(1000));
                }
                return amount;
            } catch (Exception e) {
                log.warn("Price extraction failed for: {}", message);
            }
        }
        return null;
    }

    private String extractCategory(String message) {
        if (message.contains("office") || message.contains("word") || message.contains("excel") || message.contains("powerpoint") || message.contains("so·∫°n th·∫£o") || message.contains("vƒÉn b·∫£n"))
            return "Office";
        if (message.contains("windows") || message.contains("win")) return "Windows";
        if (message.contains("adobe") || message.contains("photoshop") || message.contains("premiere") || message.contains("illustrator") || message.contains("ch·ªânh s·ª≠a") || message.contains("·∫£nh") || message.contains("video") || message.contains("thi·∫øt k·∫ø"))
            return "Design";
        if (message.contains("game") || message.contains("steam")) return "Game";
        if (message.contains("antivirus") || message.contains("b·∫£o m·∫≠t") || message.contains("di·ªát virus")) return "Security";
        if (message.contains("matlab") || message.contains("autocad") || message.contains("visual studio")) return "Professional";
        return null;
    }

    private String generateGreetingResponse() {
        return "üëã **Xin ch√†o! Ch√†o m·ª´ng ƒë·∫øn v·ªõi LicenseShop!**\n\n" +
                "T√¥i l√† Mia - tr·ª£ l√Ω AI c·ªßa LicenseShop. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n" +
                "üîé T√¨m license ph√π h·ª£p v·ªõi nhu c·∫ßu\n" +
                "üí∞ So s√°nh gi√° c·∫£ c√°c phi√™n b·∫£n\n" +
                "‚≠ê T∆∞ v·∫•n s·∫£n ph·∫©m b√°n ch·∫°y\n" +
                "üÜò H·ªó tr·ª£ th√¥ng tin c·ª≠a h√†ng\n\n" +
                "üí° **H√£y cho t√¥i bi·∫øt b·∫°n c·∫ßn g√¨!**\n" +
                "üìû **H·ªó tr·ª£ nhanh: 1900 636 969**";
    }

    private String getDefaultShopResponse() {
        return "ü§ñ **Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ LicenseShop**\n\n" +
                "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm v√† t∆∞ v·∫•n v·ªÅ:\n\n" +
                "üõçÔ∏è **S·∫£n ph·∫©m license:** Microsoft, Adobe, Windows, Game keys...\n" +
                "üè™ **Th√¥ng tin c·ª≠a h√†ng:** Li√™n h·ªá, giao h√†ng, thanh to√°n\n\n" +
                "üí° **G·ª£i √Ω:** H√£y h·ªèi v·ªÅ 'Office 2021', 'Windows 11', 'Photoshop CC'...\n" +
                "üìû **H·ªó tr·ª£ nhanh: 1900 636 969**";
    }

    // ==================== UTILITY METHODS ====================

    private List<Product> getCachedProducts() {
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastCacheUpdate > CACHE_DURATION) {
            productCache.clear();
            List<Product> products = productRepository.findAll();
            productCache.put("all", products);
            lastCacheUpdate = currentTime;
            return products;
        }
        return productCache.getOrDefault("all", productRepository.findAll());
    }

    private static String normalize(String text) {
        return text == null ? "" : text.toLowerCase()
                .replaceAll("[^a-z0-9√°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë ]", "")
                .trim();
    }

    private static String formatPrice(int price) {
        NumberFormat nf = NumberFormat.getInstance(new Locale("vi", "VN"));
        nf.setMaximumFractionDigits(0);
        return nf.format(price) + " ƒë";
    }

    private static int getMinPrice(List<Variant> variants) {
        if (variants == null || variants.isEmpty()) {
            return 0;
        }
        return variants.stream()
                .mapToInt(Variant::getPrice)
                .min()
                .orElse(0);
    }

    private static String buildVariantLabel(Variant v) {
        if (v == null) return "G√≥i c∆° b·∫£n";

        String name = v.getName() != null ? v.getName().trim() : "";
        String dur = v.getDuration() != null ? v.getDuration().trim() : "";

        if (!name.isEmpty() && !dur.isEmpty()) return name + " (" + dur + ")";
        if (!name.isEmpty()) return name;
        if (!dur.isEmpty()) return dur;
        return "G√≥i c∆° b·∫£n";
    }
}