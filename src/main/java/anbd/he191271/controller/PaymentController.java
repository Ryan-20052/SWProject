package anbd.he191271.controller;

import anbd.he191271.dto.PaymentRequestDTO;
import anbd.he191271.dto.PaymentResponseDTO;
import anbd.he191271.service.PaymentService;
import anbd.he191271.service.PurchaseService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/payment")
public class PaymentController {

    @Autowired
    private PaymentService paymentService;

    @Autowired
    private PurchaseService purchaseService;

    /**
     * ‚úÖ 1. T·∫°o URL thanh to√°n VNPAY
     */
    @PostMapping("/create")
    public PaymentResponseDTO createPayment(@RequestBody PaymentRequestDTO requestDTO,
                                            HttpServletRequest request) throws Exception {
        String clientIp = request.getRemoteAddr();

        // ‚öôÔ∏è Kh√¥ng c·∫ßn t·ª± t√≠nh totalAmount n·ªØa, v√¨ service ƒë√£ l√†m vi·ªác ƒë√≥ r·ªìi
        return paymentService.createPayment(requestDTO, clientIp);
    }

    /**
     * ‚úÖ 2. VNPAY redirect v·ªÅ ƒë√¢y sau khi thanh to√°n xong (client side)
     */
    @GetMapping("/vnpay-return")
    public void paymentReturn(@RequestParam Map<String, String> params,
                              HttpServletResponse response) throws Exception {
        PaymentResponseDTO result = paymentService.handleReturn(params);

        if (result != null && result.getOrderCode() != null) {
            boolean isSuccess = "00".equals(result.getCode());

            // ‚úÖ Update tr·∫°ng th√°i Order
            paymentService.updateOrderStatus(result.getOrderCode(), isSuccess ? "PAID" : "FAILED");

            // ‚úÖ N·∫øu thanh to√°n th√†nh c√¥ng ‚Üí t·∫°o license key + g·ª≠i mail
            if (isSuccess) {
                try {
                    purchaseService.processSuccessfulPayment(result.getOrderCode());
                    System.out.println("‚úÖ ƒê√£ g·ª≠i license key cho ƒë∆°n h√†ng: " + result.getOrderCode());
                } catch (Exception e) {
                    System.err.println("‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω license key: " + e.getMessage());
                }
            }

            // ‚úÖ Redirect v·ªÅ trang homepage k√®m tr·∫°ng th√°i
            String redirectUrl = "http://localhost:8080/home/homepage?status=" + (isSuccess ? "success" : "fail");
            response.sendRedirect(redirectUrl);
        } else {
            // ‚ùå N·∫øu l·ªói
            response.sendRedirect("http://localhost:8080/home/homepage?status=fail");
        }
    }


    /**
     * ‚úÖ 3. IPN callback ch√≠nh th·ª©c t·ª´ VNPAY (server side)
     */
    @GetMapping(value = "/vnpay-ipn", produces = "application/json")
    public ResponseEntity<Map<String, String>> paymentIpn(@RequestParam Map<String, String> params) throws Exception {
        PaymentResponseDTO dto = paymentService.handleIpn(params);

        if (dto != null && "00".equals(dto.getCode()) && dto.getOrderCode() != null) {
            try {
                purchaseService.processSuccessfulPayment(dto.getOrderCode());
                System.out.println("‚úÖ [IPN] License key ƒë√£ ƒë∆∞·ª£c t·∫°o cho order: " + dto.getOrderCode());
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è [IPN] L·ªói khi t·∫°o license key: " + e.getMessage());
            }
        }

        Map<String, String> body = new HashMap<>();
        body.put("RspCode", dto != null ? dto.getCode() : "99");
        body.put("Message", dto != null ? dto.getMessage() : "Unknown error");

        return ResponseEntity.ok(body);
    }

    /**
     * üîß H√†m ph·ª• ƒë·ªÉ build URL redirect ƒë·∫πp v√† tr√°nh l·ªói encode
     */
    // trong PaymentController - thay h√†m buildRedirectUrl c≈© b·∫±ng c√°i n√†y:
    private String buildRedirectUrl(PaymentResponseDTO result) {
        // N·∫øu th√†nh c√¥ng -> show purchased licenses
        if (result != null && "00".equals(result.getCode())) {
            return "http://localhost:8080/purchasedlicenses?status=success&orderCode=" + encode(result.getOrderCode());
        }

        // N·∫øu th·∫•t b·∫°i -> redirect v·ªÅ purchasedlicenses v·ªõi status fail (user c√≥ th·ªÉ th·ª≠ l·∫°i)
        String orderCodePart = (result != null && result.getOrderCode() != null)
                ? "&orderCode=" + encode(result.getOrderCode())
                : "";
        return "http://localhost:8080/purchasedlicenses?status=fail" + orderCodePart;
    }


    /**
     * üîß Encode chu·ªói UTF-8 an to√†n
     */
    private String encode(String value) {
        return URLEncoder.encode(value == null ? "" : value, StandardCharsets.UTF_8);
    }
}
